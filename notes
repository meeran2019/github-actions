-----------------------------------------------------------------------------------------------------------
Introduction:
-----------------------------------------------------------------------------------------------------------

No need of separate CI CD tools like jenkins.
Github manages the underlying infrastructure.
Execute tasks in virtual environment.
Git Repo -> Actions tab
Can enable or disable workflow in github UI.

Install the github actions plugin Visual Studio code. By CTRL + SPACE gives the available property.

repo-root/.github/workflows/name.yaml   -> Workflows are created in this path. 

It consists of,
    workflow
    Jobs
    Steps 
    Runner - Github hosted and Selfhosted.

In CI-CD, it is of 
    commit -> pull request -> review -> CI steps -> approve -> Merge -> CD Steps -> Deploy 

In free account, get 2000 action minutes/month and 500mb of package storage.

-----------------------------------------------------------------------------------------------------------
GitHub Actions - Core Concepts:
-----------------------------------------------------------------------------------------------------------

There are 3 main components,
    name - Workflow
    jobs - List of jobs
    steps - list of steps under the job.

    Jobs and Steps are executed sequentially. 
    Can enable or disable workflow in github UI.

    name: Sample Workflow                   -> Workflow 
    on: [push]                              -> Trigger 
    jobs:               
      build:                                -> Job 
        name: Build
        runs-on: ubuntu-latest              -> Github hosted Runner 
        steps:                              -> Steps 
        - name: Checkout repository
          uses: actions/checkout@v2         -> actions are prebuilt for the specific tasks and used. 
        - name: Set up Node.js
          uses: actions/setup-node@v2
          with:
            node-version: '14'    
        - name: Install dependencies
          run: npm install    
        - name: Build project
          run: npm run build    
        - name: Run tests
          run: npm test
    
Create first workflow:

        1. Create the directory under root-repository/.github/worklows/example.yaml 
        It support both .yml or .yaml format.
        NOTE: Github hosted or Self hosted Runner is on separate machine and by default does not have access or download the source repo. It needs to checkout separately.

GitHub Actions:

        It is prebuild workflow which designed for the specific functionality.
        It is created by community or github or github partner.
        It can be found in below URL,
            https://github.com/marketplace?query=sort%3Apopularity-desc&type=actions&verification=verified_creator
        Choose verified creator which is validated by github.
        It can be defined based on version, branch, SHAs value.
        uses: actions/checkout@v2   or actions/checkout@main or actions/checkout@HETWKNASNUWYQUWQOQW

Configure Checkout Action:

        From github market place, select the checkout actions.
          https://github.com/marketplace/actions/checkout
        By default without any parameter, it downloads all the files under the repo.

Multi Line Commands and Executing 3rd Party Libraries:

        To execute multiple commands in single run require to use | (pipe symbol)
        Under .github/workflows, have multiple workflows, based on "on:push", all workflows will be executed whenver there is a commit.        
        Can enable or disable workflow in github UI.

Execute shell scripts in workflow:

        In same run command, can execute run the script as below,
          run: 
            shell-script.sh  

          run: | 
            chmod +x shell-script.sh
            shell-script.sh

-----------------------------------------------------------------------------------------------------------

Workflow with Multiple Jobs:

        Each job runs on it own virtual machine.
        Each job virtual machine can be different like mac, windows or linux.
        By default runs in PARALLEL.
        By default, output of one job is not available for another job.

        needs is used to set dependency for the jobs.

        jobs:
          job1:
          job2:
            needs: job1
          job3:
            needs: [job1, job2]

Storing workflow data as Artifacts:

        To pass data between jobs, it require to use the shared action.
            Upload a Build artifact
            Download a Build artifact.

        Artifacts stored separately and can be used be downloaded separately.
        By default have retention of 90 days.
        Size can be 500 mb in free version.

        - uses: actions/upload-artifact@v4
          with:
            name: my-artifact
            path: path/to/artifact/world.txt

        - uses: actions/download-artifact@v4
          with:
            name: my-artifact
            path: your/destination/dir

-----------------------------------------------------------------------------------------------------------

variables at different level:

        Environment variables can be stored at,
            workflow level
            job level
            step level
            Git repository level

        It consists of define the variable and refer the variable.
        Define: Using "env:"
        Reference: using $VARIABLE_NAME or ${{ env.VARIABLE_NAME }} or ${VARIABLE_NAME}

        At workflow level, is available to all jobs and steps.
        At job level, it is available to all steps with in same job.
        At step level, it is available only within that steps.

        Priority: Step level > Job level > Workflow level.        

Repository level Secrets:

        At github, secrets can be stored at organization or repository level.
        Repository -> Settings -> Security -> Secrets and variables -> Actions
            can add secrets and variables.

        To refer the values,
            ${{ secrets.SECRET_VALUE }}
            ${{ vars.VARIABLE_VALUE}}

-----------------------------------------------------------------------------------------------------------

Triggering a workflow:

        https://docs.github.com/en/actions/using-workflows/triggering-a-workflow
        https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows

        Workflows can be trigger in multiple ways which are not limited to,
            manually
            on push (commit)

        "on" is used to trigger the workflow.

        on: push          -> Single event.
        on: [push, fork]  -> Multiple event.

        push:
          whenever there is push to any branch of the repo.

        workflow_dispatch: 
          It is used to trigger manually and pass input values from workflow screen.

            on:
              workflow_dispatch:
                inputs:
                  name:
                    type: choice
                    description: Who to greet
                    options: 
                    - monalisa
                    - cschleiden        

          type: It supports string (default), choice, boolean and environment.
          required: true/false  (By default it is false and not mandatory)

-----------------------------------------------------------------------------------------------------------

Job Concurrency:

        It ensure single job or workflow runs at a time in same concurrency group.
        It can enable at workflow or job level.
        concurrency: 
          group:                        (concurrency group unique name)
          cancel-in-progess: true       (It will cancel existing workflow/job and run new one)
          cancel-in-progess: false      (It will wait in queue and it is default behaviour)

        If mention in both workflow and job level with same group name, then it will cancel and run the workflow.

Time out:

        It is given at job level or step level or both.
        timeout-minutes: 1

-----------------------------------------------------------------------------------------------------------

Matrix strategy for a job:

        Job definition is nothing but template.
        From template, can create a multiple jobs based on the variable.

        IT IS USEFUL IN UNIT TESTING JOB, TO RUN AT DIFFERENT OS AND VERSIONS.

        To define matrix: 
          strategy:
            matrix:
              key: [value1, value2, value3]
        
        To refer the matrix value:
          ${{ matrix.key }}

        No of jobs created is based on the no of variable declared,
            For ex: key1: [value1, value2, value3] key2: [value1, value2, value3]
            Total 3 * 3 = 9 combination of jobs are created.

        By default, all jobs are executed parallely. if any one of job is failed then it will cancel pending jobs and workflow will be failed.

        include: to include additional variable which not mentioned in matrix variable.
        exclude: to exclude the existing variable.
        fail-fast: false (It prevents cancel inprogress jobs if any matrix jobs fail)
        max-parallel: 2  (no of max parallel jobs to run at a time)

          strategy:
            matrix:
              key1: [value1, value2, value3]
              key2: [value1, value2, value3]
            include:
              - key1: value4
                key2: value1
            exclude:  
              - key1: value2
                key2: value3

-----------------------------------------------------------------------------------------------------------

Access workflow context information:
 
        Contexts are way to access information about workflow runs, variables, runner environments, jobs and steps.
        Each context is an object that contains properties which can be strings or other objects.
        Context is accessed by using ${{ context }}

        https://docs.github.com/en/actions/learn-github-actions/contexts

Using expression:        

        There are many expression which support for the conditioning.

        IF condition can be given only at Step and Job level not workflow level.

            .   property reference    (github.repository_owner)
            !   Not
            ||  OR
            &&  AND
            !=  Not Equal
            ==  Equal
            >=  Greater than equal
            >   Greater than
            <   Less than
            <=  Less than equal

        Status Check Functions which commonly used are,
            success()       -> used to check status of previous job or step. It is default one.
            failure()       -> used to check status of previous job or step.
            cancelled()     -> used to check whether current job or step is cancelled.
            always()        -> used to run always irrespective of previous job or step.

Workflow event filters and Activity type:

        Activity type is additonal status available withrespect to event trigger.
        For example: with pull_request event, have below activity types,
            assigned, closed, reopened, opened, locked, unloacked etc.

        Filters are used to include and exclude based on property.
        For example: in below, filtered based on branch and tags.
            on:
              push:
                branches:
                  - master
                  - 'release-*'
                tags:
                  - 'v1.*'
                  - 'v2.*'

Cancelling and Skipping workflows:

        While doing commit, can instruct not to run the workflow..
        Below are the valid values to include along with commit message,
            [skip ci]
            [ci skip]
            [no ci]
            [skip actions]
            [actions skip]
            skip-checks: true

Artifacts vs dependency caching: 

        Both are ability to store file in github.
        Use caching, when files dont change and wanted to reuse across workflow.
        Use artifacts, when to see the files after workflow is completed.
        List of cache stored can seen from UI and reused if run workflow again.

Cache Dependencies to speedup workflow:

        It uses the cache action.
        In Input, consists of:
            key: name to identify the cache.
            path: files/folder to cache.

        Cache can be stored, restored and saved.

        Cache can be invalidated by deleting the cache from UI or by change in cache key.

GITHUB_TOKEN:

        At start of each workflow, github automatically creates GITHUB_TOKEN secret to use in the workflow.
        This token is available in github.token context and referred by ${{ secrets.GITHUB_TOKEN }}
        Its validity for the workflow running time or maximum of 24 hours.

        For default permission, refer the page https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token

        By default only have read permission. This can be check in "Set up Job" step. Permisison can be override at job level.

          jobs:
            first-job:
                permissions:                                 
                  repository-projects: write

Job Container:

        It helps to run a job in a container.
        It helps to run a application that is preinstalled with required software packages.
        NOTE: job container, service container and docker container action runs on Linux runner only not windows.

        runs-on: Here mention the runner to run. Act as a docker host.

Service Container:

        It is an additional container environment that can be linked to job container.
        It provide additional services or dependencies.These services can be cache, database or other external services.
        It is typically used for settingup infrastructure or dependencies that job needs to communicate during its execution. 

Job Container vs Service Container:

        Job container is to define the primary runtime of the job. 
        Service container is to provide additional services or dependencies.

        Job container enables the same runtime or application across the environment. Act as docker host.
        Service container enables the testing or integration with external dependencies.

        Without job container: call service by localhost:port 
        With job container: It is like container (job) to container (service) communication. Docker containers runs on same user defined bridge network expose all ports to each other. So no need of call by local host but instead access the service using label.

GITHUB_ENV:

        echo "environment_variable_name=value" >> "$GITHUB_ENV"   (To define)
        ${{ env.environment_variable_name }}                      (To refer)
        Can make environment variable available to subsequent steps in workflow job by defining or updating environment variable and writing to this GITHUB_ENV file.
        The step creates/updates does not have access to this environment variable but subsequent steps can access.

GITHUB_OUTPUT:

        It helps to pass dynamic variable from one stop in one job to another step in another job.
        echo "test=hello" >> "$GITHUB_OUTPUT" and use outputs (To define the value)
        ${{needs.job1.outputs.output1}}                       (To refer the value)

-----------------------------------------------------------------------------------------------------------

Environments:

        It helps to isolate environment like dev, qa, prod etc.
        Each environment have own services and own credentials.
        
        Repository level secrets/variables available across repo.
        Credentials are visible to all users (public)
        All jobs can access in workflow.

        Environment level secrets/variables available at environment level.
        Credentials are visible to all users but can make private.
        Only jobs running within that environment can access.

        ENVIRONMENTAL LEVEL SECRETS/VARIABLE ARE HIGHER PRECEDENCE THAN REPOSITORY LEVEL SECRETS/VARIABLE.

        It also gives deployment protection rules like,
              Manual deployment     (required reviewers)
              Delay deployment      (wait timer)
              Restrict deployment   (deployment branches and tags)

        env: It is used to set the environment variable.
        environment: It is used to set the github environment like develop, qa etc.

        Below is given at job level to specify which environment to run.

          environment:
            name: development
            url: https://xxx.com        (This URL is displaying in workflow screen)

-----------------------------------------------------------------------------------------------------------
Error Handling:
-----------------------------------------------------------------------------------------------------------

continue-on-error:

        It is given at job or step level but not workflow level.
        Continue the next step or job eventhough failure.
        If given at job level, it prevents workflow from failing.
        If given at step level, it prevents job from failing.

        jobs:
          build:
            runs-on: ubuntu-latest
            continue-on-error: true

        jobs:
          build:
            runs-on: ubuntu-latest
            steps:
              - name: Step 2
                run: exit 1
                continue-on-error: true

-----------------------------------------------------------------------------------------------------------
Functions:
-----------------------------------------------------------------------------------------------------------

        hashfiles('filename')     -> Output is hash value of file. If any changes in file, new hash value is generated.
        contains(github.ref, 'feature/')  -> it checks whether current brnch have feature.

-----------------------------------------------------------------------------------------------------------
Continuos Integration with GitHub Actions
-----------------------------------------------------------------------------------------------------------

        Below are the commonly used pre build actions,
            checkout
            upload-artifact
            download-artifact
            cache
            docker/login-action (for dockerhub)
            aws-actions/amazon-ecr-login (for aws ecr)
            docker/build-push-action

-----------------------------------------------------------------------------------------------------------
Continuos Deployment with GitHub Actions
-----------------------------------------------------------------------------------------------------------

        Below are the commonly used pre build actions,
            azure/setup-kubectl@v3
            azure/k8s-set-context@v3   (store kubeconfig as secrets)
            cschleiden/replace-token@v1          

-----------------------------------------------------------------------------------------------------------
Runners:
-----------------------------------------------------------------------------------------------------------

Types of Runners:

        Runner is virtual machine on which workflow is running.

        There are 2 types,
            Github Hosted:
                Standard, Enterprise and beta GPU-enabled github runner
            Self Hosted:
                User can run on own runner.
        
        Self Hosted Runner:
            User deploy own machine and run the workflow.
            It gives, 
                Custom execution environment.
                Controlled environment for security.
                Eliminates wait time.
                Scalability depends upon need.
                Reduced Latency in CICD workflow.

        Self hosted runner can be added at organization or repository or enterprise.

Self hosted runner Installation:

        In Linux 2 ec2, install the below packages,

          sudo yum update -y && \
          sudo yum install docker -y && \
          sudo yum install git -y && \
          sudo yum install libicu -y && \
          sudo systemctl enable docker

        Then follow the steps given in github to procees.

        Runner Group cannot be create at repository level.

Other details in runner:

        _diag/  -> Contains logs in self hosted machine.
        _work/  -> Gives details on workflow execution.

-----------------------------------------------------------------------------------------------------------
Security:
-----------------------------------------------------------------------------------------------------------

Security Hardening:

        Save credentials as secrets.
        Secrets are masked in logs.
        OpenID connect support with cloud providers.
        Use github verified actions or own actions.

Script Injection Attack:

        In comments or title, whatever command given within "; commands" will be executed.
              ";ls $GITHUB_WORKSPACE"

        To prevent this, instead of directly refer the variable in run command. Pass this input to env variable which store as inmemory and from there refer in run command.

Workflow Status batch:

        Actions -> Action Name -> ... -> Create Status batch.

            Branch, Event -> Copy status batch.

-----------------------------------------------------------------------------------------------------------
Reusable workflows and reporting:
-----------------------------------------------------------------------------------------------------------

Reusable workflow:

        It helps to reuse the workflow and no need to write the code multiple times.

        on:                             (To define the resuable workflow/called workflow)
          workflow_call:


        dev-deploy:                     (To call the reusable workflow/caller workflow)
          needs: [first-job]
          uses: ./.github/workflows/reusable-workflow.yaml                  (If same repo)
          uses: organization/repo/.github/workflows/reusable-workflow.yml   (If different repo)

        To define inputs or outputs or secrets that passed from caller workflow.

        By default, secrets or variables or environment variables are cannot be used directly from called workflow and must pass from caller to called workflow.

            In called workflow: 

              on:                                       (To define in called)
                workflow_call:
                  inputs:
                    config-path:
                      required: true
                      type: string
                  secrets:
                    envPAT:
                      required: true

              jobs:                                    (To refer in called)
                reusable_workflow_job:
                  runs-on: ubuntu-latest
                  environment: production
                  steps:
                  - uses: actions/labeler@v4
                    with:                               
                      repo-token: ${{ secrets.envPAT }}
                      configuration-path: ${{ inputs.config-path }}              


            In called workflow (different organization): 

              jobs:                                       (To pass from caller workflow)
                call-workflow-passing-data:
                  uses: octo-org/example-repo/.github/workflows/reusable-workflow.yml@main
                  with:                                    ( For inputs, use with)
                    config-path: .value1
                  secrets:
                    envPAT: ${{ secrets.envPAT }}

            In called workflow (same organization): 

                jobs:
                  call-workflow-passing-data:
                    uses: octo-org/example-repo/.github/workflows/reusable-workflow.yml@main
                    with:
                      config-path: .github/labeler.yml
                    secrets: inherit
        
        OUTPUT is helpful to transfer data from called to caller workflow.

-----------------------------------------------------------------------------------------------------------            