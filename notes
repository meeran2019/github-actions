-----------------------------------------------------------------------------------------------------------
Introduction:
-----------------------------------------------------------------------------------------------------------

No need of separate CI CD tools like jenkins.
Github manages the underlying infrastructure.
Execute tasks in virtual environment.
Git Repo -> Actions tab
Can enable or disable workflow in github UI.

repo-root/.github/workflows/name.yaml   -> Workflows are created in this path. 

It consists of,
    workflow
    Jobs
    Steps 
    Runner - Github hosted and Selfhosted.

In CI-CD, it is of 
    commit -> pull request -> review -> CI steps -> approve -> Merge -> CD Steps -> Deploy 

In free account, get 2000 action minutes/month and 500mb of package storage.

-----------------------------------------------------------------------------------------------------------
GitHub Actions - Core Concepts:
-----------------------------------------------------------------------------------------------------------

There are 3 main components,
    name - Workflow
    jobs - List of jobs
    steps - list of steps under the job.

    Jobs and Steps are executed sequentially. 
    Can enable or disable workflow in github UI.

    name: Sample Workflow                   -> Workflow 
    on: [push]                              -> Trigger 
    jobs:               
      build:                                -> Job 
        name: Build
        runs-on: ubuntu-latest              -> Github hosted Runner 
        steps:                              -> Steps 
        - name: Checkout repository
          uses: actions/checkout@v2         -> actions are prebuilt for the specific tasks and used. 
        - name: Set up Node.js
          uses: actions/setup-node@v2
          with:
            node-version: '14'    
        - name: Install dependencies
          run: npm install    
        - name: Build project
          run: npm run build    
        - name: Run tests
          run: npm test
    

Create first workflow:

        1. Create the directory under root-repository/.github/worklows/example.yaml 
        It support both .yml or .yaml format.
        NOTE: Github hosted or Self hosted Runner is on separate machine and by default does not have access or download the source repo. It needs to checkout separately.

GitHub Actions:

        It is prebuild workflow which designed for the specific functionality.
        It is created by community or github or github partner.
        It can be found in below URL,
            https://github.com/marketplace?query=sort%3Apopularity-desc&type=actions&verification=verified_creator
        Choose verified creator which is validated by github.
        It can be defined based on version, branch, SHAs value.
        uses: actions/checkout@v2   or actions/checkout@main or actions/checkout@HETWKNASNUWYQUWQOQW

Configure Checkout Action:

        From github market place, select the checkout actions.
          https://github.com/marketplace/actions/checkout
        By default without any parameter, it downloads all the files under the repo.

Multi Line Commands and Executing 3rd Party Libraries:

        To execute multiple commands in single run require to use | (pipe symbol)
        Under .github/workflows, have multiple workflows, based on "on:push", all workflows will be executed whenver there is a commit.        
        Can enable or disable workflow in github UI.

Execute shell scripts in workflow:

        In same run command, can execute run the script as below,
          run: 
            shell-script.sh  

          run: | 
            chmod +x shell-script.sh
            shell-script.sh

-----------------------------------------------------------------------------------------------------------

Workflow with Multiple Jobs:

        Each job runs on it own virtual machine.
        Each job virtual machine can be different like mac, windows or linux.
        By default runs in PARALLEL.
        By default, output of one job is not available for another job.

        needs is used to set dependency for the jobs.

        jobs:
          job1:
          job2:
            needs: job1
          job3:
            needs: [job1, job2]

Storing workflow data as Artifacts:
        To pass data between jobs, it require to use the shared action.
            Upload a Build artifact
            Download a Build artifact.

        Artifacts stored separately and can be used be downloaded separately.
        By default have retention of 90 days.
        Size can be 500 mb in free version.

        - uses: actions/upload-artifact@v4
          with:
            name: my-artifact
            path: path/to/artifact/world.txt

        - uses: actions/download-artifact@v4
          with:
            name: my-artifact
            path: your/destination/dir

-----------------------------------------------------------------------------------------------------------

variables at different level:

        Environment variables can be stored at,
            workflow level
            job level
            step level
            Git repository level

        It consists of define the variable and refer the variable.
        Define: Using "env:"
        Reference: using $VARIABLE_NAME or ${{ env.VARIABLE_NAME }} or ${VARIABLE_NAME}

        At workflow level, is available to all jobs and steps.
        At job level, it is available to all steps with in same job.
        At step level, it is available only within that steps.

        Priority: Step level > Job level > Workflow level.        

Repository level Secrets:

        At github, secrets can be stored at organization or repository level.
        Repository -> Settings -> Security -> Secrets and variables -> Actions
            can add secrets and variables.

        To refer the values,
            ${{ secrets.SECRET_VALUE }}
            ${{ vars.VARIABLE_VALUE}}

-----------------------------------------------------------------------------------------------------------

Triggering a workflow:

        https://docs.github.com/en/actions/using-workflows/triggering-a-workflow
        https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows

        Workflows can be trigger in multiple ways which are not limited to,
            manually
            on push (commit)

        "on" is used to trigger the workflow.

        on: push          -> Single event.
        on: [push, fork]  -> Multiple event.

        push:
          whenever there is push to any branch of the repo.

        workflow_dispatch: 
          It is used to trigger manually and pass input values from workflow screen.

            on:
              workflow_dispatch:
                inputs:
                  name:
                    type: choice
                    description: Who to greet
                    options: 
                    - monalisa
                    - cschleiden        

          type: It supports string (default), choice, boolean and environment.
          required: true/false  (By default it is false and not mandatory)

-----------------------------------------------------------------------------------------------------------

Job Concurrency:

        It ensure single job or workflow runs at a time in same concurrency group.
        It can enable at workflow or job level.
        concurrency: 
          group:                        (concurrency group unique name)
          cancel-in-progess: true       (It will cancel existing workflow/job and run new one)
          cancel-in-progess: false      (It will wait in queue and it is default behaviour)

        If mention in both workflow and job level with same group name, then it will cancel and run the workflow.

Time out:

        It is given at job level or step level or both.
        timeout-minutes: 1

-----------------------------------------------------------------------------------------------------------

Matrix strategy for a job:

        Job definition is nothing but template.
        From template, can create a multiple jobs based on the variable.

        To define matrix: 
          strategy:
            matrix:
              key: [value1, value2, value3]
        
        To refer the matrix value:
          ${{ matrix.key }}

        No of jobs created on the no of variable declared,
            For ex: key1: [value1, value2, value3] key2: [value1, value2, value3]
            Total 3 * 3 = 9 combination of jobs are created.

        By default, all jobs are executed parallely. if any one of job is failed then it will cancel pending jobs and workflow will be failed.

        include: to include additional variable which not mentioned in matrix variable.
        exclude: to exclude the existing variable.
        fail-fast: false (It prevents cancel inprogress jobs if any matrix jobs fail)
        max-parallel: 2  (no of max parallel jobs to run at a time)

          strategy:
            matrix:
              key1: [value1, value2, value3]
              key2: [value1, value2, value3]
            include:
              - key1: value4
                key2: value1
            exclude:  
              - key1: value2
                key2: value3

-----------------------------------------------------------------------------------------------------------

